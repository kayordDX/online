// This file is auto-generated by @hey-api/openapi-ts

import { type MutationOptions, queryOptions } from '@tanstack/svelte-query';

import { client } from '../client.gen';
import { accountMe, login, logout, onlineFeaturesAccountLoginGoogleEndpoint, type Options, refresh, register, test } from '../sdk.gen';
import type { AccountMeData, LoginData, LoginError, LoginResponse, LogoutData, LogoutError, LogoutResponse, OnlineFeaturesAccountLoginGoogleEndpointData, RefreshData, RefreshError, RefreshResponse, RegisterData, RegisterError, RegisterResponse, TestData } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const testQueryKey = (options: Options<TestData>) => createQueryKey('test', options);

export const testOptions = (options: Options<TestData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await test({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: testQueryKey(options)
    });
};

export const registerMutation = (options?: Partial<Options<RegisterData>>): MutationOptions<RegisterResponse, RegisterError, Options<RegisterData>> => {
    const mutationOptions: MutationOptions<RegisterResponse, RegisterError, Options<RegisterData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await register({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const refreshMutation = (options?: Partial<Options<RefreshData>>): MutationOptions<RefreshResponse, RefreshError, Options<RefreshData>> => {
    const mutationOptions: MutationOptions<RefreshResponse, RefreshError, Options<RefreshData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await refresh({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const accountMeQueryKey = (options?: Options<AccountMeData>) => createQueryKey('accountMe', options);

export const accountMeOptions = (options?: Options<AccountMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await accountMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: accountMeQueryKey(options)
    });
};

export const logoutMutation = (options?: Partial<Options<LogoutData>>): MutationOptions<LogoutResponse, LogoutError, Options<LogoutData>> => {
    const mutationOptions: MutationOptions<LogoutResponse, LogoutError, Options<LogoutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await logout({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginMutation = (options?: Partial<Options<LoginData>>): MutationOptions<LoginResponse, LoginError, Options<LoginData>> => {
    const mutationOptions: MutationOptions<LoginResponse, LoginError, Options<LoginData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await login({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const onlineFeaturesAccountLoginGoogleEndpointQueryKey = (options: Options<OnlineFeaturesAccountLoginGoogleEndpointData>) => createQueryKey('onlineFeaturesAccountLoginGoogleEndpoint', options);

export const onlineFeaturesAccountLoginGoogleEndpointOptions = (options: Options<OnlineFeaturesAccountLoginGoogleEndpointData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await onlineFeaturesAccountLoginGoogleEndpoint({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: onlineFeaturesAccountLoginGoogleEndpointQueryKey(options)
    });
};
