// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { AccountMeData, AccountMeErrors, AccountMeResponses, LoginData, LoginErrors, LoginResponses, LogoutData, LogoutErrors, LogoutResponses, OnlineFeaturesAccountLoginGoogleEndpointData, OnlineFeaturesAccountLoginGoogleEndpointErrors, OnlineFeaturesAccountLoginGoogleEndpointResponses, RefreshData, RefreshErrors, RefreshResponses, RegisterData, RegisterErrors, RegisterResponses, TestData, TestErrors, TestResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const test = <ThrowOnError extends boolean = false>(options: Options<TestData, ThrowOnError>) => {
    return (options.client ?? client).get<TestResponses, TestErrors, ThrowOnError>({
        url: '/test',
        ...options
    });
};

export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterResponses, RegisterErrors, ThrowOnError>({
        url: '/account/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const refresh = <ThrowOnError extends boolean = false>(options?: Options<RefreshData, ThrowOnError>) => {
    return (options?.client ?? client).post<RefreshResponses, RefreshErrors, ThrowOnError>({
        url: '/account/refresh',
        ...options
    });
};

export const accountMe = <ThrowOnError extends boolean = false>(options?: Options<AccountMeData, ThrowOnError>) => {
    return (options?.client ?? client).get<AccountMeResponses, AccountMeErrors, ThrowOnError>({
        url: '/account/me',
        ...options
    });
};

export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<LogoutResponses, LogoutErrors, ThrowOnError>({
        url: '/account/logout',
        ...options
    });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginResponses, LoginErrors, ThrowOnError>({
        url: '/account/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const onlineFeaturesAccountLoginGoogleEndpoint = <ThrowOnError extends boolean = false>(options: Options<OnlineFeaturesAccountLoginGoogleEndpointData, ThrowOnError>) => {
    return (options.client ?? client).get<OnlineFeaturesAccountLoginGoogleEndpointResponses, OnlineFeaturesAccountLoginGoogleEndpointErrors, ThrowOnError>({
        url: '/account/login/google',
        ...options
    });
};
