// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://localhost:5017' | (string & {});
};

/**
 * the dto used to send an error response to the client when an unhandled exception occurs on the server
 */
export type InternalErrorResponse = {
    /**
     * error status
     */
    status: string;
    /**
     * http status code of the error response
     */
    code: number;
    /**
     * the reason for the error
     */
    reason: string;
    /**
     * additional information or instructions
     */
    note: string;
};

export type User = {
    /**
     * Gets or sets the primary key for this user.
     */
    id: number;
    /**
     * Gets or sets the user name for this user.
     */
    userName?: string | null;
    /**
     * Gets or sets the normalized user name for this user.
     */
    normalizedUserName?: string | null;
    /**
     * Gets or sets the email address for this user.
     */
    email?: string | null;
    /**
     * Gets or sets the normalized email address for this user.
     */
    normalizedEmail?: string | null;
    /**
     * Gets or sets a flag indicating if a user has confirmed their email address.
     */
    emailConfirmed: boolean;
    /**
     * Gets or sets a salted and hashed representation of the password for this user.
     */
    passwordHash?: string | null;
    /**
     * A random value that must change whenever a users credentials change (password changed, login removed)
     */
    securityStamp?: string | null;
    /**
     * A random value that must change whenever a user is persisted to the store
     */
    concurrencyStamp?: string | null;
    /**
     * Gets or sets a telephone number for the user.
     */
    phoneNumber?: string | null;
    /**
     * Gets or sets a flag indicating if a user has confirmed their telephone address.
     */
    phoneNumberConfirmed: boolean;
    /**
     * Gets or sets a flag indicating if two factor authentication is enabled for this user.
     */
    twoFactorEnabled: boolean;
    /**
     * Gets or sets the date and time, in UTC, when any user lockout ends.
     */
    lockoutEnd?: string | null;
    /**
     * Gets or sets a flag indicating if the user could be locked out.
     */
    lockoutEnabled: boolean;
    /**
     * Gets or sets the number of failed login attempts for the current user.
     */
    accessFailedCount: number;
    firstName: string;
    lastName: string;
    refreshToken?: string | null;
    refreshTokenExpiresAtUtc?: string | null;
};

export type UserRegisterRequest = {
    firstName: string;
    lastName: string;
    email: string;
    password: string;
};

/**
 * the dto used to send an error response to the client
 */
export type ErrorResponse = {
    /**
     * the http status code sent to the client. default is 400.
     */
    statusCode: number;
    /**
     * the message for the error response
     */
    message: string;
    /**
     * the collection of errors for the current context
     */
    errors: {
        [key: string]: Array<string>;
    };
};

export type Response = {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
};

export type LoginRequest = {
    email: string;
    password: string;
    twoFactorCode?: string | null;
    twoFactorRecoveryCode?: string | null;
};

export type TestData = {
    body?: never;
    path?: never;
    query: {
        name: string;
    };
    url: '/test';
};

export type TestErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Server Error
     */
    500: InternalErrorResponse;
};

export type TestError = TestErrors[keyof TestErrors];

export type TestResponses = {
    /**
     * Success
     */
    200: Array<User>;
};

export type TestResponse = TestResponses[keyof TestResponses];

export type RegisterData = {
    body: UserRegisterRequest;
    path?: never;
    query?: never;
    url: '/account/register';
};

export type RegisterErrors = {
    /**
     * Server Error
     */
    500: InternalErrorResponse;
};

export type RegisterError = RegisterErrors[keyof RegisterErrors];

export type RegisterResponses = {
    /**
     * No Content
     */
    204: void;
};

export type RegisterResponse = RegisterResponses[keyof RegisterResponses];

export type RefreshData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/account/refresh';
};

export type RefreshErrors = {
    /**
     * Server Error
     */
    500: InternalErrorResponse;
};

export type RefreshError = RefreshErrors[keyof RefreshErrors];

export type RefreshResponses = {
    /**
     * No Content
     */
    204: void;
};

export type RefreshResponse = RefreshResponses[keyof RefreshResponses];

export type AccountMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/account/me';
};

export type AccountMeErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Server Error
     */
    500: InternalErrorResponse;
};

export type AccountMeError = AccountMeErrors[keyof AccountMeErrors];

export type AccountMeResponses = {
    /**
     * Success
     */
    200: Response;
};

export type AccountMeResponse = AccountMeResponses[keyof AccountMeResponses];

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/account/logout';
};

export type LogoutErrors = {
    /**
     * Server Error
     */
    500: InternalErrorResponse;
};

export type LogoutError = LogoutErrors[keyof LogoutErrors];

export type LogoutResponses = {
    /**
     * Success
     */
    200: boolean;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type LoginData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/account/login';
};

export type LoginErrors = {
    /**
     * Server Error
     */
    500: InternalErrorResponse;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
    /**
     * No Content
     */
    204: void;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type OnlineFeaturesAccountLoginGoogleEndpointData = {
    body?: never;
    path?: never;
    query: {
        returnUrl: string;
    };
    url: '/account/login/google';
};

export type OnlineFeaturesAccountLoginGoogleEndpointErrors = {
    /**
     * Server Error
     */
    500: InternalErrorResponse;
};

export type OnlineFeaturesAccountLoginGoogleEndpointError = OnlineFeaturesAccountLoginGoogleEndpointErrors[keyof OnlineFeaturesAccountLoginGoogleEndpointErrors];

export type OnlineFeaturesAccountLoginGoogleEndpointResponses = {
    /**
     * No Content
     */
    204: void;
};

export type OnlineFeaturesAccountLoginGoogleEndpointResponse = OnlineFeaturesAccountLoginGoogleEndpointResponses[keyof OnlineFeaturesAccountLoginGoogleEndpointResponses];
