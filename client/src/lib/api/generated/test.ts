/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * online
 * OpenAPI spec version: v1
 */
import { createQuery } from "@tanstack/svelte-query";
import type {
	CreateQueryOptions,
	CreateQueryResult,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type { FastEndpointsInternalErrorResponse } from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType } from "../mutator/customInstance.svelte";

export const onlineFeaturesTestEndpoint = () => {
	return customInstance<number[]>({ url: `/test`, method: "GET" });
};

export const getOnlineFeaturesTestEndpointQueryKey = () => {
	return [`/test`] as const;
};

export const getOnlineFeaturesTestEndpointQueryOptions = <
	TData = Awaited<ReturnType<typeof onlineFeaturesTestEndpoint>>,
	TError = ErrorType<null | FastEndpointsInternalErrorResponse>,
>(options?: {
	query?: CreateQueryOptions<Awaited<ReturnType<typeof onlineFeaturesTestEndpoint>>, TError, TData>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getOnlineFeaturesTestEndpointQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof onlineFeaturesTestEndpoint>>> = () =>
		onlineFeaturesTestEndpoint();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof onlineFeaturesTestEndpoint>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type OnlineFeaturesTestEndpointQueryResult = NonNullable<
	Awaited<ReturnType<typeof onlineFeaturesTestEndpoint>>
>;
export type OnlineFeaturesTestEndpointQueryError =
	ErrorType<null | FastEndpointsInternalErrorResponse>;

export function createOnlineFeaturesTestEndpoint<
	TData = Awaited<ReturnType<typeof onlineFeaturesTestEndpoint>>,
	TError = ErrorType<null | FastEndpointsInternalErrorResponse>,
>(options?: {
	query?: CreateQueryOptions<Awaited<ReturnType<typeof onlineFeaturesTestEndpoint>>, TError, TData>;
}): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getOnlineFeaturesTestEndpointQueryOptions(options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
