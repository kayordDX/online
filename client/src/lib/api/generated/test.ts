/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * online
 * OpenAPI spec version: v1
 */
import { createQuery } from "@tanstack/svelte-query";
import type {
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	QueryClient,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type { InternalErrorResponse } from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType } from "../mutator/customInstance.svelte";

export const test = () => {
	return customInstance<number[]>({ url: `/test`, method: "GET" });
};

export const getTestQueryKey = () => {
	return [`/test`] as const;
};

export const getTestQueryOptions = <
	TData = Awaited<ReturnType<typeof test>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(options?: {
	query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTestQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof test>>> = () => test();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof test>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TestQueryResult = NonNullable<Awaited<ReturnType<typeof test>>>;
export type TestQueryError = ErrorType<null | InternalErrorResponse>;

export function createTest<
	TData = Awaited<ReturnType<typeof test>>,
	TError = ErrorType<null | InternalErrorResponse>,
>(
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getTestQueryOptions(options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
