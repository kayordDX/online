// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

/**
 * the dto used to send an error response to the client when an unhandled exception occurs on the server
 */
export const zInternalErrorResponse = z.object({
    status: z.string().default('Internal Server Error!'),
    code: z.int().default(500),
    reason: z.string().default('Something unexpected has happened'),
    note: z.string().default('See application log for stack trace.')
});

export const zUser = z.object({
    id: z.int(),
    userName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    normalizedUserName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    email: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    normalizedEmail: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    emailConfirmed: z.boolean(),
    passwordHash: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    securityStamp: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    concurrencyStamp: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    phoneNumber: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    phoneNumberConfirmed: z.boolean(),
    twoFactorEnabled: z.boolean(),
    lockoutEnd: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    lockoutEnabled: z.boolean(),
    accessFailedCount: z.int(),
    firstName: z.string(),
    lastName: z.string(),
    refreshToken: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    refreshTokenExpiresAtUtc: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ]))
});

export const zUserRegisterRequest = z.object({
    firstName: z.string(),
    lastName: z.string(),
    email: z.string(),
    password: z.string()
});

/**
 * the dto used to send an error response to the client
 */
export const zErrorResponse = z.object({
    statusCode: z.int().default(400),
    message: z.string().default('One or more errors occurred!'),
    errors: z.record(z.string(), z.array(z.string()))
});

export const zResponse = z.object({
    id: z.string(),
    email: z.string(),
    firstName: z.string(),
    lastName: z.string()
});

export const zLoginRequest = z.object({
    email: z.string(),
    password: z.string(),
    twoFactorCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    twoFactorRecoveryCode: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zTestData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.object({
        name: z.string()
    })
});

/**
 * Success
 */
export const zTestResponse = z.array(zUser);

export const zRegisterData = z.object({
    body: zUserRegisterRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * No Content
 */
export const zRegisterResponse = z.void();

export const zRefreshData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * No Content
 */
export const zRefreshResponse = z.void();

export const zAccountMeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zAccountMeResponse = zResponse;

export const zLogoutData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zLogoutResponse = z.boolean();

export const zLoginData = z.object({
    body: zLoginRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * No Content
 */
export const zLoginResponse = z.void();

export const zOnlineFeaturesAccountLoginGoogleEndpointData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.object({
        returnUrl: z.string()
    })
});

/**
 * No Content
 */
export const zOnlineFeaturesAccountLoginGoogleEndpointResponse = z.void();
