/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * online
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type {
	GoogleLoginCallbackParams,
	InternalErrorResponse,
	LoginRequest,
	OnlineFeaturesAccountLoginGoogleEndpointParams,
	UserRegisterRequest,
} from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const register = (userRegisterRequest: BodyType<UserRegisterRequest>) => {
	return customInstance<null>({
		url: `/account/register`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: userRegisterRequest,
	});
};

export const getRegisterMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof register>>,
		TError,
		{ data: BodyType<UserRegisterRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof register>>,
	TError,
	{ data: BodyType<UserRegisterRequest> },
	TContext
> => {
	const mutationKey = ["register"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof register>>,
		{ data: BodyType<UserRegisterRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return register(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RegisterMutationResult = NonNullable<Awaited<ReturnType<typeof register>>>;
export type RegisterMutationBody = BodyType<UserRegisterRequest>;
export type RegisterMutationError = ErrorType<InternalErrorResponse>;

export const createRegister = <TError = ErrorType<InternalErrorResponse>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof register>>,
			TError,
			{ data: BodyType<UserRegisterRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof register>>,
	TError,
	{ data: BodyType<UserRegisterRequest> },
	TContext
> => {
	const mutationOptions = getRegisterMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const refresh = () => {
	return customInstance<null>({ url: `/account/refresh`, method: "POST" });
};

export const getRefreshMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<Awaited<ReturnType<typeof refresh>>, TError, void, TContext>;
}): CreateMutationOptions<Awaited<ReturnType<typeof refresh>>, TError, void, TContext> => {
	const mutationKey = ["refresh"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof refresh>>, void> = () => {
		return refresh();
	};

	return { mutationFn, ...mutationOptions };
};

export type RefreshMutationResult = NonNullable<Awaited<ReturnType<typeof refresh>>>;

export type RefreshMutationError = ErrorType<InternalErrorResponse>;

export const createRefresh = <TError = ErrorType<InternalErrorResponse>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<Awaited<ReturnType<typeof refresh>>, TError, void, TContext>;
	},
	queryClient?: QueryClient
): CreateMutationResult<Awaited<ReturnType<typeof refresh>>, TError, void, TContext> => {
	const mutationOptions = getRefreshMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const onlineFeaturesAccountLoginEndpoint = (loginRequest: BodyType<LoginRequest>) => {
	return customInstance<null>({
		url: `/account/login`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: loginRequest,
	});
};

export const getOnlineFeaturesAccountLoginEndpointMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof onlineFeaturesAccountLoginEndpoint>>,
		TError,
		{ data: BodyType<LoginRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof onlineFeaturesAccountLoginEndpoint>>,
	TError,
	{ data: BodyType<LoginRequest> },
	TContext
> => {
	const mutationKey = ["onlineFeaturesAccountLoginEndpoint"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof onlineFeaturesAccountLoginEndpoint>>,
		{ data: BodyType<LoginRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return onlineFeaturesAccountLoginEndpoint(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type OnlineFeaturesAccountLoginEndpointMutationResult = NonNullable<
	Awaited<ReturnType<typeof onlineFeaturesAccountLoginEndpoint>>
>;
export type OnlineFeaturesAccountLoginEndpointMutationBody = BodyType<LoginRequest>;
export type OnlineFeaturesAccountLoginEndpointMutationError = ErrorType<InternalErrorResponse>;

export const createOnlineFeaturesAccountLoginEndpoint = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof onlineFeaturesAccountLoginEndpoint>>,
			TError,
			{ data: BodyType<LoginRequest> },
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof onlineFeaturesAccountLoginEndpoint>>,
	TError,
	{ data: BodyType<LoginRequest> },
	TContext
> => {
	const mutationOptions = getOnlineFeaturesAccountLoginEndpointMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const onlineFeaturesAccountLoginGoogleEndpoint = (
	params: OnlineFeaturesAccountLoginGoogleEndpointParams
) => {
	return customInstance<null>({ url: `/account/login/google`, method: "GET", params });
};

export const getOnlineFeaturesAccountLoginGoogleEndpointQueryKey = (
	params?: OnlineFeaturesAccountLoginGoogleEndpointParams
) => {
	return [`/account/login/google`, ...(params ? [params] : [])] as const;
};

export const getOnlineFeaturesAccountLoginGoogleEndpointQueryOptions = <
	TData = Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: OnlineFeaturesAccountLoginGoogleEndpointParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getOnlineFeaturesAccountLoginGoogleEndpointQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>
	> = () => onlineFeaturesAccountLoginGoogleEndpoint(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OnlineFeaturesAccountLoginGoogleEndpointQueryResult = NonNullable<
	Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>
>;
export type OnlineFeaturesAccountLoginGoogleEndpointQueryError = ErrorType<InternalErrorResponse>;

export function createOnlineFeaturesAccountLoginGoogleEndpoint<
	TData = Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: OnlineFeaturesAccountLoginGoogleEndpointParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<
				Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getOnlineFeaturesAccountLoginGoogleEndpointQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const googleLoginCallback = (params: GoogleLoginCallbackParams) => {
	return customInstance<null>({ url: `/account/login/google/callback`, method: "GET", params });
};

export const getGoogleLoginCallbackQueryKey = (params?: GoogleLoginCallbackParams) => {
	return [`/account/login/google/callback`, ...(params ? [params] : [])] as const;
};

export const getGoogleLoginCallbackQueryOptions = <
	TData = Awaited<ReturnType<typeof googleLoginCallback>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: GoogleLoginCallbackParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof googleLoginCallback>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGoogleLoginCallbackQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof googleLoginCallback>>> = () =>
		googleLoginCallback(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof googleLoginCallback>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GoogleLoginCallbackQueryResult = NonNullable<
	Awaited<ReturnType<typeof googleLoginCallback>>
>;
export type GoogleLoginCallbackQueryError = ErrorType<InternalErrorResponse>;

export function createGoogleLoginCallback<
	TData = Awaited<ReturnType<typeof googleLoginCallback>>,
	TError = ErrorType<InternalErrorResponse>,
>(
	params: GoogleLoginCallbackParams,
	options?: {
		query?: Partial<
			CreateQueryOptions<Awaited<ReturnType<typeof googleLoginCallback>>, TError, TData>
		>;
	},
	queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGoogleLoginCallbackQueryOptions(params, options);

	const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
