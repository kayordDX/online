/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * online
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
} from "@tanstack/svelte-query";

import type {
	FastEndpointsInternalErrorResponse,
	GoogleLoginCallbackParams,
	MicrosoftAspNetCoreIdentityDataLoginRequest,
	OnlineFeaturesAccountLoginGoogleEndpointParams,
	OnlineFeaturesAccountRegisterEndpointParams,
} from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const onlineFeaturesAccountRegisterEndpoint = (
	params: OnlineFeaturesAccountRegisterEndpointParams
) => {
	return customInstance<null>({ url: `/account/register`, method: "GET", params });
};

export const getOnlineFeaturesAccountRegisterEndpointQueryKey = (
	params?: OnlineFeaturesAccountRegisterEndpointParams
) => {
	return [`/account/register`, ...(params ? [params] : [])] as const;
};

export const getOnlineFeaturesAccountRegisterEndpointQueryOptions = <
	TData = Awaited<ReturnType<typeof onlineFeaturesAccountRegisterEndpoint>>,
	TError = ErrorType<FastEndpointsInternalErrorResponse>,
>(
	params: OnlineFeaturesAccountRegisterEndpointParams,
	options?: {
		query?: CreateQueryOptions<
			Awaited<ReturnType<typeof onlineFeaturesAccountRegisterEndpoint>>,
			TError,
			TData
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getOnlineFeaturesAccountRegisterEndpointQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof onlineFeaturesAccountRegisterEndpoint>>
	> = () => onlineFeaturesAccountRegisterEndpoint(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof onlineFeaturesAccountRegisterEndpoint>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type OnlineFeaturesAccountRegisterEndpointQueryResult = NonNullable<
	Awaited<ReturnType<typeof onlineFeaturesAccountRegisterEndpoint>>
>;
export type OnlineFeaturesAccountRegisterEndpointQueryError =
	ErrorType<FastEndpointsInternalErrorResponse>;

export function createOnlineFeaturesAccountRegisterEndpoint<
	TData = Awaited<ReturnType<typeof onlineFeaturesAccountRegisterEndpoint>>,
	TError = ErrorType<FastEndpointsInternalErrorResponse>,
>(
	params: OnlineFeaturesAccountRegisterEndpointParams,
	options?: {
		query?: CreateQueryOptions<
			Awaited<ReturnType<typeof onlineFeaturesAccountRegisterEndpoint>>,
			TError,
			TData
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getOnlineFeaturesAccountRegisterEndpointQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const onlineFeaturesAccountRefreshEndpoint = () => {
	return customInstance<null>({ url: `/account/refresh`, method: "POST" });
};

export const getOnlineFeaturesAccountRefreshEndpointMutationOptions = <
	TError = ErrorType<FastEndpointsInternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof onlineFeaturesAccountRefreshEndpoint>>,
		TError,
		void,
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof onlineFeaturesAccountRefreshEndpoint>>,
	TError,
	void,
	TContext
> => {
	const mutationKey = ["onlineFeaturesAccountRefreshEndpoint"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof onlineFeaturesAccountRefreshEndpoint>>,
		void
	> = () => {
		return onlineFeaturesAccountRefreshEndpoint();
	};

	return { mutationFn, ...mutationOptions };
};

export type OnlineFeaturesAccountRefreshEndpointMutationResult = NonNullable<
	Awaited<ReturnType<typeof onlineFeaturesAccountRefreshEndpoint>>
>;

export type OnlineFeaturesAccountRefreshEndpointMutationError =
	ErrorType<FastEndpointsInternalErrorResponse>;

export const createOnlineFeaturesAccountRefreshEndpoint = <
	TError = ErrorType<FastEndpointsInternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof onlineFeaturesAccountRefreshEndpoint>>,
		TError,
		void,
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof onlineFeaturesAccountRefreshEndpoint>>,
	TError,
	void,
	TContext
> => {
	const mutationOptions = getOnlineFeaturesAccountRefreshEndpointMutationOptions(options);

	return createMutation(mutationOptions);
};
export const onlineFeaturesAccountLoginEndpoint = (
	microsoftAspNetCoreIdentityDataLoginRequest: BodyType<MicrosoftAspNetCoreIdentityDataLoginRequest>
) => {
	return customInstance<null>({
		url: `/account/login`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: microsoftAspNetCoreIdentityDataLoginRequest,
	});
};

export const getOnlineFeaturesAccountLoginEndpointMutationOptions = <
	TError = ErrorType<FastEndpointsInternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof onlineFeaturesAccountLoginEndpoint>>,
		TError,
		{ data: BodyType<MicrosoftAspNetCoreIdentityDataLoginRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof onlineFeaturesAccountLoginEndpoint>>,
	TError,
	{ data: BodyType<MicrosoftAspNetCoreIdentityDataLoginRequest> },
	TContext
> => {
	const mutationKey = ["onlineFeaturesAccountLoginEndpoint"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof onlineFeaturesAccountLoginEndpoint>>,
		{ data: BodyType<MicrosoftAspNetCoreIdentityDataLoginRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return onlineFeaturesAccountLoginEndpoint(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type OnlineFeaturesAccountLoginEndpointMutationResult = NonNullable<
	Awaited<ReturnType<typeof onlineFeaturesAccountLoginEndpoint>>
>;
export type OnlineFeaturesAccountLoginEndpointMutationBody =
	BodyType<MicrosoftAspNetCoreIdentityDataLoginRequest>;
export type OnlineFeaturesAccountLoginEndpointMutationError =
	ErrorType<FastEndpointsInternalErrorResponse>;

export const createOnlineFeaturesAccountLoginEndpoint = <
	TError = ErrorType<FastEndpointsInternalErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof onlineFeaturesAccountLoginEndpoint>>,
		TError,
		{ data: BodyType<MicrosoftAspNetCoreIdentityDataLoginRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof onlineFeaturesAccountLoginEndpoint>>,
	TError,
	{ data: BodyType<MicrosoftAspNetCoreIdentityDataLoginRequest> },
	TContext
> => {
	const mutationOptions = getOnlineFeaturesAccountLoginEndpointMutationOptions(options);

	return createMutation(mutationOptions);
};
export const onlineFeaturesAccountLoginGoogleEndpoint = (
	params: OnlineFeaturesAccountLoginGoogleEndpointParams
) => {
	return customInstance<null>({ url: `/account/login/google`, method: "GET", params });
};

export const getOnlineFeaturesAccountLoginGoogleEndpointQueryKey = (
	params?: OnlineFeaturesAccountLoginGoogleEndpointParams
) => {
	return [`/account/login/google`, ...(params ? [params] : [])] as const;
};

export const getOnlineFeaturesAccountLoginGoogleEndpointQueryOptions = <
	TData = Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>,
	TError = ErrorType<FastEndpointsInternalErrorResponse>,
>(
	params: OnlineFeaturesAccountLoginGoogleEndpointParams,
	options?: {
		query?: CreateQueryOptions<
			Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>,
			TError,
			TData
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getOnlineFeaturesAccountLoginGoogleEndpointQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>
	> = () => onlineFeaturesAccountLoginGoogleEndpoint(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type OnlineFeaturesAccountLoginGoogleEndpointQueryResult = NonNullable<
	Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>
>;
export type OnlineFeaturesAccountLoginGoogleEndpointQueryError =
	ErrorType<FastEndpointsInternalErrorResponse>;

export function createOnlineFeaturesAccountLoginGoogleEndpoint<
	TData = Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>,
	TError = ErrorType<FastEndpointsInternalErrorResponse>,
>(
	params: OnlineFeaturesAccountLoginGoogleEndpointParams,
	options?: {
		query?: CreateQueryOptions<
			Awaited<ReturnType<typeof onlineFeaturesAccountLoginGoogleEndpoint>>,
			TError,
			TData
		>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getOnlineFeaturesAccountLoginGoogleEndpointQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const googleLoginCallback = (params: GoogleLoginCallbackParams) => {
	return customInstance<null>({ url: `/account/login/google/callback`, method: "GET", params });
};

export const getGoogleLoginCallbackQueryKey = (params?: GoogleLoginCallbackParams) => {
	return [`/account/login/google/callback`, ...(params ? [params] : [])] as const;
};

export const getGoogleLoginCallbackQueryOptions = <
	TData = Awaited<ReturnType<typeof googleLoginCallback>>,
	TError = ErrorType<FastEndpointsInternalErrorResponse>,
>(
	params: GoogleLoginCallbackParams,
	options?: {
		query?: CreateQueryOptions<Awaited<ReturnType<typeof googleLoginCallback>>, TError, TData>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGoogleLoginCallbackQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof googleLoginCallback>>> = () =>
		googleLoginCallback(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof googleLoginCallback>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GoogleLoginCallbackQueryResult = NonNullable<
	Awaited<ReturnType<typeof googleLoginCallback>>
>;
export type GoogleLoginCallbackQueryError = ErrorType<FastEndpointsInternalErrorResponse>;

export function createGoogleLoginCallback<
	TData = Awaited<ReturnType<typeof googleLoginCallback>>,
	TError = ErrorType<FastEndpointsInternalErrorResponse>,
>(
	params: GoogleLoginCallbackParams,
	options?: {
		query?: CreateQueryOptions<Awaited<ReturnType<typeof googleLoginCallback>>, TError, TData>;
	}
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGoogleLoginCallbackQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
